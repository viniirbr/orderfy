// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  customer  String
  Cart      Cart?              @relation(fields: [cartId], references: [id])
  cartId    String?
  products  OrdersOnProducts[]
}

model Product {
  id          String             @id @default(cuid())
  name        String             @unique
  description String
  price       Float
  image       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  category    Category           @relation(fields: [categoryId], references: [id])
  categoryId  String
  orders      OrdersOnProducts[]
}

model OrdersOnProducts {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  productId String
  quantity  Int      @default(1)

  @@id([orderId, productId])
}

model Cart {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  customer   User       @relation(fields: [customerId], references: [id])
  customerId String
  orders     Order[]
  due        DateTime?
  status     CartStatus @default(CREATING)
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  company       String
  role          Role      @default(CUSTOMER)
  Carts         Cart[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  CUSTOMER
}

enum CartStatus {
  CREATING
  RECEIVED
  PREPARING
  DELIVERED
}
